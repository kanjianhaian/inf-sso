<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:inf-cache="http://www.qixianglicai.com/schema/inf/inf-cache"
	xmlns:inf-rpc="http://www.qixianglicai.com/schema/inf/inf-rpc"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
		http://www.qixianglicai.com/schema/inf/inf-rpc http://www.qixianglicai.com/schema/inf/inf-rpc/inf-rpc-1.0.0.xsd
		http://www.qixianglicai.com/schema/inf/inf-cache http://www.qixianglicai.com/schema/inf/inf-cache/inf-cache-1.0.0.xsd">

	<!-- 自定义Realm,即指定Shiro验证用户登录的类a -->
	<bean id="casRealm" class="com.ly.fn.inf.sso.client.demo.CustomCasRealm">
		<property name="defaultPermissions" value="user:create,user:update" />
		<!-- <property name="roleAttributeNames" value="roles" />
		<property name="permissionAttributeNames" value="permissions" /> -->
		<property name="casServerUrlPrefix" value="https://ssoserver:8443" />
		<property name="casService" value="http://ssoclient:8081/cas" />
	</bean>

<!-- 	<bean id="redisConnectionFactory" class="com.ly.fn.inf.redis.DefaultRedisConnectionFactory">
		<property name="host" value="${redis.ip}" />
		<property name="port" value="${redis.port}" />
	</bean>

	<bean id="redisTemplate" class="com.ly.fn.inf.redis.DefaultRedisTemplate">
		<property name="connectionFactory" ref="redisConnectionFactory" />
	</bean>

	<bean id="sessionManager" class="com.ly.fn.inf.shiro.session.SimpleSessionManager">
		<property name="globalSessionTimeout" value="1800000" />
		<property name="sessionChunk" value="sso-client-demo" />
		<property name="redisTemplate" ref="redisTemplate" />
	</bean> -->

	<!-- Shiro默认会使用Servlet容器的Session,可通过sessionMode属性来指定使用Shiro原生Session -->
	<!-- 即<property name="sessionMode" value="native"/>,详细说明见官方文档 -->
	<!-- 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="authenticator" ref="authenticator" />
		<property name="realms" ref="casRealm" />
		<!-- <property name="sessionManager" ref="sessionManager" /> -->
	</bean>

	<bean id="authenticator" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator" />
	
	<bean id="casFilter" class="org.apache.shiro.cas.CasFilter">
		<property name="failureUrl" value="/failure"/>
	</bean>
	
	<bean id="logoutFilter" class="org.apache.shiro.web.filter.authc.LogoutFilter">
		<property name="redirectUrl" value="https://ssoserver:8443/logout?service=http://ssoclient:8081/index"/>
	</bean>
	
	<!-- Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->
	<!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl"
			value="https://ssoserver:8443/login?service=http://ssoclient:8081/cas" />
		<property name="successUrl" value="/index" />
		<property name="filters">
			<util:map>
				<entry key="cas" value-ref="casFilter" />
				<entry key="ssoLogoutFilter" value-ref="logoutFilter" />
			</util:map>
		</property>
		<property name="filterChainDefinitions">
			<value>
				/failure = anon
				/cas = cas
				/logout = ssoLogoutFilter
				/** = user
			</value>
		</property>
	</bean>
	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
	<bean
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
		depends-on="lifecycleBeanPostProcessor">
	</bean>
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>
</beans>